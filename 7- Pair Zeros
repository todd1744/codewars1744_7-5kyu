For a given list of digits 0 to 9, return a list with the same digits in the same order, but with all 0s paired. Pairing two 0s generates one 0 at the location of the first one.

Examples
input: [0, 1, 0, 2]
paired: ^-----^
    -> [0, 1,   2]
  kept: ^

input: [0, 1, 0, 0]
paired: ^-----^
    -> [0, 1,    0]
  kept: ^        ^

input: [1, 0, 7, 0, 1]
paired:    ^-----^
    -> [1, 0, 7,    1]
  kept:    ^

input: [0, 1, 7, 0, 2, 2, 0, 0, 1, 0]
paired: ^--------^        ^--^
    -> [0, 1, 7,    2, 2, 0,    1, 0]
  kept: ^                 ^        ^
  
Notes
Pairing happens from left to right. For each pairing, the second 0 will always be paired towards the first ( right to left )
0s generated by pairing can NOT be paired again
( void where not applicable: ) Don't modify the input array or you may fail to pass the tests

def pair_zeros(arr):
    brr = []
    flag = True
    for v in arr:
        if v != 0:
            brr.append(v)
        if v == 0 and flag is True:
            brr.append(v)
            flag = False
        elif v == 0 and flag is False:
            flag = True
    return brr

# also

from itertools import count
def pair_zeros(arr, *args):
    c = count(1)
    return [elem for elem in arr if elem != 0 or next(c) % 2]
    
def pair_zeros(nums, *_):
    result = []
    skip_zero = False
    for a in nums:
        if a == 0:
            if not skip_zero:
                result.append(a)
            skip_zero = not skip_zero
        else:
            result.append(a)
    return result    
